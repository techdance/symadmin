{% set _entity_config = easyadmin_entity(app.request.query.get('entity')) %}
{% trans_default_domain _entity_config.translation_domain %}
{% set _trans_parameters = { '%entity_name%': _entity_config.name|trans, '%entity_label%': _entity_config.label|trans } %}
{% set _has_batch_actions = batch_form is defined and batch_form.vars.batch_actions|length > 0 %}
{% set _has_filters = _entity_config.list.filters|default(false) %}

{% extends _entity_config.templates.layout %}

{% set _request_parameters = app.request.query.all|merge(_request_parameters|default({}))|merge({
  action: app.request.get('action'),
  entity: _entity_config.name,
  menuIndex: app.request.get('menuIndex'),
  submenuIndex: app.request.get('submenuIndex'),
  sortField: app.request.get('sortField', ''),
  sortDirection: app.request.get('sortDirection', 'DESC'),
  page: app.request.get('page', 1),
  referer: null
}) %}

{% if 'search' == app.request.get('action') %}
  {% set _request_parameters = _request_parameters|merge({
    query: app.request.get('query')|default(''),
    sortField: _entity_config.search.sort.field|default(app.request.get('sortField', '')),
    sortDirection: _entity_config.search.sort.direction|default(app.request.get('sortDirection', 'DESC')),
  }) %}
{% endif %}

{% set _request_parameters = _request_parameters|merge({ referer: path('easyadmin', _request_parameters)|url_encode }) %}

{% block body_id 'easyadmin-list-' ~ _entity_config.name %}
{% block body_class 'list list-' ~ _entity_config.name|lower %}

{% block content_title %}
  {% spaceless %}
    {% if 'search' == app.request.get('action') %}
      {% set _default_title = 'search.page_title'|transchoice(paginator.nbResults, {}, 'EasyAdminBundle') %}
      {{ (_entity_config.search.title is defined ? _entity_config.search.title|transchoice(paginator.nbResults) : _default_title)|raw }}
    {% else %}
      {% set _default_title = 'list.page_title'|trans(_trans_parameters, 'EasyAdminBundle') %}
      {{ (_entity_config.list.title is defined ? _entity_config.list.title|trans(_trans_parameters) : _default_title)|raw }}
    {% endif %}
  {% endspaceless %}
{% endblock %}




{% block content_header %}
  <div class="row">
    <div class="col-sm-5">
      {% block content_title_wrapper %}
        <h1 class="title">{{ block('content_title') }}</h1>
      {% endblock %}
    </div>

    {% block batch_actions %}
      {% if _has_batch_actions %}
          <div class="batch-actions" style="display: none">
              {% form_theme batch_form with easyadmin_config('design.form_theme') only %}
              {{ form(batch_form) }}

              {{ include('@EasyAdmin/default/includes/_batch_action_modal.html.twig', {
                  _translation_domain: _entity_config.translation_domain,
                  _trans_parameters: _trans_parameters,
                  _entity_config: _entity_config,
              }, with_context = false) }}
          </div>
      {% endif %}
    {% endblock batch_actions %}

    <div class="col-sm-7">
      <div class="global-actions">
        {% block global_actions %}
          {% if easyadmin_action_is_enabled_for_list_view('search', _entity_config.name) %}
            {% set _action = easyadmin_get_action_for_list_view('search', _entity_config.name) %}

            {% block search_action %}
              <div class="form-action {{ _action.css_class|default('') }}">
                <form method="get" action="{{ path('easyadmin') }}">
                  {% block search_form %}
                    <input type="hidden" name="action" value="search">
                    <input type="hidden" name="entity" value="{{ _request_parameters.entity }}">
                    <input type="hidden" name="sortField" value="{{ _entity_config.search.sort.field|default(_request_parameters.sortField) }}">
                    <input type="hidden" name="sortDirection" value="{{ _entity_config.search.sort.direction|default(_request_parameters.sortDirection) }}">
                    <input type="hidden" name="menuIndex" value="{{ _request_parameters.menuIndex }}">
                    <input type="hidden" name="submenuIndex" value="{{ _request_parameters.submenuIndex }}">
                    <div class="input-group">
                      <input class="form-control" type="search" name="query" value="{{ app.request.get('query')|default('') }}">
                      <span class="input-group-btn">
                                                <button class="btn" type="submit" formtarget="{{ _action.target }}">
                                                    <i class="fa fa-search"></i>
                                                    <span class="hidden-xs hidden-sm">{{ _action.label|default('action.search')|trans(_trans_parameters) }}</span>
                                                </button>
                                            </span>
                    </div>
                  {% endblock %}
                </form>
              </div>
            {% endblock search_action %}
          {% endif %}

                 {% set _action = easyadmin_get_action_for_list_view('new', _entity_config.name) %}
               
                  {% set _list_item_create = easyadmin_get_actions_for_list_item(_entity_config.name) %}

                  {% block import_action %}
              
                  {% endblock import_action %}   


                  {% block new_action %}
                 
                   {% for  metadata in _list_item_create %}
                   {% if metadata.name == 'create' %}
                    {% if metadata.roles is not defined or in_array(metadata.roles, easyadmin_app_roles()) %}
                    <div class="button-action">
                      <a class="{{ _action.css_class|default('') }}" href="{{ path('easyadmin', _request_parameters|merge({ action: _action.name })) }}" target="{{ _action.target }}">
                        {% if _action.icon %}<i class="fa fa-{{ _action.icon }}"></i>{% endif %}
                        {{ _action.label is defined and not _action.label is empty ? _action.label|trans(_trans_parameters) }}
                      </a>
                    </div>
                    {% endif %}
                     {% endif %}
                    {% endfor %}
                  {% endblock new_action %}              
                 
        {% endblock global_actions %}
      </div>
    </div>
  </div>
{% endblock content_header %}

{% block main %}
  {% set _list_item_actions = easyadmin_get_actions_for_list_item(_entity_config.name) %}

  <div class="table-responsive">
    <table class="table">
      <thead>
      {% block table_head %}
        <tr>
        {% if _has_batch_actions and in_array('BATCH', easyadmin_app_roles()) %}
              <th width="1px"><span><input type="checkbox" class="form-batch-checkbox-all"></span></th>
          {% endif %}
          {% for field, metadata in fields %}
            {% set isSortingField = metadata.property == app.request.get('sortField')|split('.')|first %}
            {% set nextSortDirection = isSortingField ? (app.request.get('sortDirection') == 'DESC' ? 'ASC' : 'DESC') : 'DESC' %}
            {% set _column_label = (metadata.label ?: field|humanize)|trans(_trans_parameters) %}
            {% set _column_icon = isSortingField ? (nextSortDirection == 'DESC' ? 'fa-caret-up' : 'fa-caret-down') : 'fa-sort' %}

            {# Check role based permission for current user #}

            {% if metadata.roles is not defined or in_array(metadata.roles, easyadmin_app_roles()) %}
              <th data-property-name="{{ metadata.property }}"
                  class="{{ isSortingField ? 'sorted' }} {{ metadata.virtual ? 'virtual' }} {{ metadata.dataType|lower }} {{ metadata.css_class }}" {{ easyadmin_config('design.rtl') ? 'dir="rtl"' }}>
                {% if metadata.sortable %}
                  <a href="{{ path('easyadmin', _request_parameters|merge({ page: 1, sortField: metadata.property, sortDirection: nextSortDirection })) }}">
                    <i class="fa {{ _column_icon }}"></i>
                    {{ _column_label|raw }}
                  </a>
                {% else %}
                  <span>{{ _column_label|raw }}</span>
                {% endif %}
              </th>
            {% endif %}
          {% endfor %}

          {% if _list_item_actions|length > 0 %}
            <th  {{ easyadmin_config('design.rtl') ? 'dir="rtl"' }}>
              <span>{{ 'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') }}</span>
            </th>
          {% endif %}
        </tr>
      {% endblock table_head %}
      </thead>

      <tbody>
      {% block table_body %}
        {% for item in paginator.currentPageResults %}
          {# the empty string concatenation is needed when the primary key is an object (e.g. an Uuid object) #}
          {% set _item_id = '' ~ attribute(item, _entity_config.primary_key_field_name) %}
          <tr data-id="{{ _item_id }}">
            {% if _has_batch_actions and in_array('BATCH', easyadmin_app_roles()) %}
                <td><input type="checkbox" class="form-batch-checkbox" value="{{ _item_id }}"></td>
            {% endif %}
            {% for field, metadata in fields %}
              {% set isSortingField = metadata.property == app.request.get('sortField') %}
              {% set _column_label =  (metadata.label ?: field|humanize)|trans(_trans_parameters)  %}

              {# Check role based permission for current user #}
              {% if metadata.roles is not defined or in_array(metadata.roles, easyadmin_app_roles()) %}
                <td data-label="{{ _column_label }}"
                    class="{{ isSortingField ? 'sorted' }} {{ metadata.dataType|lower }} {{ metadata.css_class }}" {{ easyadmin_config('design.rtl') ? 'dir="rtl"' }}>
                  {{ easyadmin_render_field_for_list_view(_entity_config.name, item, metadata) }}
                </td>
              {% endif %}
            {% endfor %}

            {% if _list_item_actions|length > 0 %}
              {% set _column_label =  'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') %}
              <td data-label="{{ _column_label }}" class="actions">
                {% block item_actions %}
                  {{ include('//easyadmin-bundle/src/Resources/views/default/includes/_actions.html.twig', {
                    actions: _list_item_actions,
                    request_parameters: _request_parameters,
                    translation_domain: _entity_config.translation_domain,
                    trans_parameters: _trans_parameters,
                    item_id: _item_id
                  }, with_context = false) }}
                {% endblock item_actions %}
              </td>
            {% endif %}
          </tr>
        {% else %}
          <tr>
            <td class="no-results" colspan="{{ _list_item_actions|length > 0 ? fields|length + 1 : fields|length }}">
              {{ 'search.no_results'|trans(_trans_parameters, 'EasyAdminBundle') }}
            </td>
          </tr>
        {% endfor %}
      {% endblock table_body %}
      </tbody>
    </table>
  </div>

  {% block paginator %}
    {{ include(_entity_config.templates.paginator) }}
  {% endblock paginator %}

  {% block delete_form %}
    {% set referer = paginator.currentPage == paginator.nbPages and 1 != paginator.currentPage and 1 == paginator.currentPageResults|length
      ? path('easyadmin', app.request.query|merge({ page: app.request.query.get('page') - 1 }))
      : app.request.requestUri
    %}

    {{ include('@EasyAdmin/default/includes/_delete_form.html.twig', {
      view: 'list',
      referer: referer|url_encode,
      delete_form: delete_form_template,
      _translation_domain: _entity_config.translation_domain,
      _trans_parameters: _trans_parameters,
      _entity_config: _entity_config,
    }, with_context = false) }}
  {% endblock delete_form %}
{% endblock main %}

{% block body_javascript %}
  {{ parent() }}

  <script type="text/javascript">

    $(function() {
            const toggles = document.querySelectorAll('.checkbox-switch input[type="checkbox"]');
            for (i = 0; i < toggles.length; i++) {
                toggles[i].addEventListener('change', function () {
                    const toggle = this;
                    const newValue = this.checked;
                    const oldValue = !newValue;
                    const propertyName = this.closest('.checkbox-switch').dataset.propertyname;

                    const toggleUrl = "{{ path('easyadmin', { action: 'edit', entity: _entity_config.name, view: 'list' })|raw }}"
                        + "&id=" + this.closest('tr').dataset.id
                        + "&property=" + propertyName
                        + "&newValue=" + newValue.toString();

                    let toggleRequest = $.ajax({ type: "GET", url: toggleUrl, data: {} });

                    toggleRequest.done(function(result) {});

                    toggleRequest.fail(function() {
                        // in case of error, restore the original value and disable the toggle
                        toggle.checked = oldValue;
                        toggle.disabled = true;
                        toggle.closest('.checkbox-switch').classList.add('disabled');
                    });
                });
            }

            $('.action-delete').on('click', function(e) {
                e.preventDefault();
                const id = $(this).parents('tr').first().data('id');

                $('#modal-delete').modal({ backdrop: true, keyboard: true })
                    .off('click', '#modal-delete-button')
                    .on('click', '#modal-delete-button', function () {
                        let deleteForm = $('#delete-form');
                        deleteForm.attr('action', deleteForm.attr('action').replace('__id__', id));
                        deleteForm.trigger('submit');
                    });
            });

            {% if _has_filters %}
            // HTML5 specifies that a <script> tag inserted with innerHTML should not execute
            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
            // That's why we can't use just 'innerHTML'. See https://stackoverflow.com/a/47614491/2804294
            var setInnerHTML = function(element, htmlContent) {
                element.innerHTML = htmlContent;
                Array.from(element.querySelectorAll('script')).forEach( oldScript => {
                    const newScript = document.createElement('script');
                    Array.from(oldScript.attributes)
                        .forEach(attr => newScript.setAttribute(attr.name, attr.value));
                    newScript.appendChild(document.createTextNode(oldScript.innerHTML));
                    oldScript.parentNode.replaceChild(newScript, oldScript);
                });
            };

            document.querySelector('.action-filters-button').addEventListener('click', function(event) {
                let filterButton = event.currentTarget;
                let filterModal = document.querySelector(filterButton.dataset.modal);
                let filterModalBody = filterModal.querySelector('.modal-body');

                $(filterModal).modal({ backdrop: true, keyboard: true });
                filterModalBody.innerHTML = '<div class="fa-3x px-3 py-3 text-muted text-center"><i class="fas fa-circle-notch fa-spin"></i></div>';

                $.get(filterButton.getAttribute('href'), function (response) {
                    setInnerHTML(filterModalBody, response);
                });

                event.preventDefault();
                event.stopPropagation();
            });
            {% endif %}

            {% if _has_batch_actions %}
            const titleContent = $('.content-header-title > .title').html();
            $(document).on('click', '.deselect-batch-button', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox-all').prop('checked', false).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox-all', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox').prop('checked', $(this).prop('checked')).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox', function () {
              
                const $content = $(this).closest('.content');
                let $input = $content.find(':hidden#batch_form_ids');
                let ids = $input.val() ? $input.val().split(',') : [];
                const id = $(this).val();

                if ($(this).prop('checked')) {
                    if (-1 === ids.indexOf(id)) {
                        ids.push(id);
                    }
                } else {
                    ids = ids.filter(function(value) { return value !== id });
                    $content.find(':checkbox.form-batch-checkbox-all').prop('checked', false);
                }

                if (0 === ids.length) {
                    $content.find('.global-actions').show();
                    $content.find('.batch-actions').hide();
                    $content.find('table').removeClass('table-batch');
                } else {
                    $content.find('.batch-actions').show();
                    $content.find('.global-actions').hide();
                    $content.find('table').addClass('table-batch');
                }

                $input.val(ids.join(','));
                $content.find('.content-header-title > .title').html(0 === ids.length ? titleContent : '');
            });

            let modalTitle = $('#batch-action-confirmation-title');
            const titleContentWithPlaceholders = modalTitle.text();
            $('button[name="batch_form[name]"].batch-action-requires-confirmation').on('click', function (event) {
                event.preventDefault();
                event.stopPropagation();
                let $button = $(this);

                const actionName = $button.text();
                const numberOfSelectedItems = $('input[type="checkbox"].form-batch-checkbox:checked').length;
                modalTitle.text(titleContentWithPlaceholders
                    .replace('%action_name%', actionName)
                    .replace('%num_items%', numberOfSelectedItems));

                $('#modal-batch-action').modal({ backdrop : true, keyboard : true })
                    .off('click', '#modal-batch-action-button')
                    .on('click', '#modal-batch-action-button', function () {
                        $button.unbind('click');
                        $button.trigger('click');

                        modalTitle.text(titleContentWithPlaceholders);
                    });
            });
            {% endif %}
        });



    $(function() {
      $('#main').find('table .toggle input[type="checkbox"]').change(function() {
        var toggle = $(this);
        var newValue = toggle.prop('checked');
        var oldValue = !newValue;
        var columnIndex = $(this).closest('td').index() + 1;
        var propertyName = $('table th.toggle:nth-child(' + columnIndex + ')').data('property-name');
        var toggleUrl = "{{ path('easyadmin', { action: 'edit', entity: _entity_config.name, view: 'list' })|raw }}"
          + "&id=" + $(this).closest('tr').data('id')
          + "&property=" + propertyName
          + "&newValue=" + newValue.toString();
        var toggleRequest = $.ajax({ type: "GET", url: toggleUrl, data: {} });
        toggleRequest.done(function(result) {});
        toggleRequest.fail(function() {
          // in case of error, restore the original value and disable the toggle
          toggle.bootstrapToggle(oldValue == true ? 'on' : 'off');
          toggle.bootstrapToggle('disable');
        });
      });
      $('.action-delete').on('click', function(e) {
        e.preventDefault();
        var id = $(this).parents('tr').first().data('id');
        $('#modal-delete').modal({ backdrop: true, keyboard: true })
          .off('click', '#modal-delete-button')
          .on('click', '#modal-delete-button', function () {
            var deleteForm = $('#delete-form');
            deleteForm.attr('action', deleteForm.attr('action').replace('__id__', id));
            deleteForm.trigger('submit');
          });
      });
    });
  </script>

  {% if 'search' == app.request.get('action') %}
    <script type="text/javascript">
      var _search_query = "{{ app.request.get('query')|default('')|e('js') }}";
      // the original query is prepended to allow matching exact phrases in addition to single words
      $('#main').find('table tbody').highlight($.merge([_search_query], _search_query.split(' ')));
    </script>
  {% endif %}
{% endblock %}
